(ns sports-app.rocket-ship
  (:require ["package:flutter/material.dart" :as m]
            ["package:rive/rive.dart" :as rive]
            [cljd.flutter :as f]))
            ;["dart-widgets/rocket-ship.dart" :as rs]))

;; example of state machine implementation in dart
;; https://rive.app/docs/runtimes/state-machines#flutter

;; most likely we need onOnit to be created using deftype, example of deftype here
;; https://buttondown.com/tensegritics-curiosities/archive/game-tutorial-in-clojuredart/

;; finally cheat sheet is here:
;; https://github.com/Tensegritics/ClojureDart/blob/main/doc/ClojureDart%20Cheatsheet.pdf

;; (defn load-rocket-ship
;;   []
;;   (let [state-machine-atom (atom nil)
;;         artboard-atom (atom nil)]
;;     ;; return a vector
;;     [(rive/RiveAnimation.network
;;    "assets/animations/rocket_ship.riv"
;;    .artboard "Artboard"
;;    .stateMachines ["State Machine 1"]
;;    .controllers []
;;    .onInit (fn [artboard]
;;                ;; Create StateMachineController with Artboard object
;;                (let [controller (rive/StateMachineController.fromArtboard
;;                                   artboard
;;                                   "State Machine 1")]
;;                  (reset! state-machine-atom controller)
;;                  (reset! artboard-atom artboard)
;;                  (when controller
;;                    (.addController artboard controller)))
;;              nil))
;;      state-machine-atom
;;      artboard-atom]))

(defn trigger
  [controller ^String trigger]
  (first (filter (fn [smi] (= (.-name smi) trigger)) (.-inputs @controller))))

(defn input
  [controller ^String input]
  (first (filter (fn [smi] (= (.-name smi) input)) (.-inputs @controller))))

(defn make-controller
  [artboard ^String state-machine]
  "Create StateMachineController with Artboard object."
  (let [controller (rive/StateMachineController.fromArtboard
                      artboard
                      state-machine)]
    (when controller
      (.addController artboard controller))
    controller))

(defn load-asset
  [filepath ^String main-state-machine]
  (let [state-machine-controller-atom (atom nil)]
    {:widget (rive/RiveAnimation.network
                filepath
                .onInit (fn [artboard]
                            (reset! state-machine-controller-atom (make-controller artboard main-state-machine))
                            nil))
    :controller state-machine-controller-atom}))

;; state machine controller might be the only type of controller
;; state machine controller only has .fromArtboard, no other .from
;; do we need to dispose anything with .dispose ???
