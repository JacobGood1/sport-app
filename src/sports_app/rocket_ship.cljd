(ns sports-app.rocket-ship
  (:require ["package:flutter/material.dart" :as m]
            ["package:rive/rive.dart" :as rive]
            [cljd.flutter :as f]))
            ;["dart-widgets/rocket-ship.dart" :as rs]))

;; example of state machine implementation in dart
;; https://rive.app/docs/runtimes/state-machines#flutter

;; most likely we need onOnit to be created using deftype, example of deftype here
;; https://buttondown.com/tensegritics-curiosities/archive/game-tutorial-in-clojuredart/

;; finally cheat sheet is here:
;; https://github.com/Tensegritics/ClojureDart/blob/main/doc/ClojureDart%20Cheatsheet.pdf

(defn handle-trigger [controller]
  (.fire (first (.-inputs @controller)))
  nil)

(defn load-rocket-ship
  []
  (let [state-machine-atom (atom nil)
        artboard-atom (atom nil)]
    ;; return a vector
    [(rive/RiveAnimation.network
   "assets/animations/rocket_ship.riv"
   .artboard "Artboard"
   .stateMachines ["State Machine 1"]
   .controllers []
   .onInit (fn [artboard]
               ;; Create StateMachineController with Artboard object
               (let [controller (rive/StateMachineController.fromArtboard
                                  artboard
                                  "State Machine 1")]
                 (reset! state-machine-atom controller)
                 (reset! artboard-atom artboard)
                 (when controller
                   (.addController artboard controller)))
             nil))
     state-machine-atom
     artboard-atom]))
